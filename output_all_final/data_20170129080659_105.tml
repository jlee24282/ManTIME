<?xml version="1.0" ?>
<TimeML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://timeml.org/timeMLdocs/TimeML_1.2.1.xsd">

<DOCID>695194706242</DOCID>

<DCT><TIMEX3 tid="t0" type="DATE" value="20170129" temporalFunction="false" functionInDocument="CREATION_TIME">January 29, 2017</TIMEX3></DCT>

<TITLE>Apply memory management "Alloc()" in **real** practice</TITLE>


<TEXT>
I have a entity-component-based game engine. 
 
There are many systems, e.g. System_A , System_B ,... all derived from SystemDefault . 
 
If I <EVENT eid="e1" class="I_STATE">want</EVENT> to <EVENT eid="e2" class="OCCURRENCE">use</EVENT> custom memory allocator, how can I <EVENT eid="e3" class="OCCURRENCE">used</EVENT> it in a real <EVENT eid="e4" class="OCCURRENCE">game</EVENT>? 
 
 
 
Question 1: Where is the field "allocator", how many of them? 
 
Solution 1A : Store it in a top header. There might be 3 types: stack, one frame, and heap. 
 
Disadvantage: 
 
Many systems will tend to <EVENT eid="e5" class="OCCURRENCE">use</EVENT> the share allocator, thus this solution may not <EVENT eid="e6" class="OCCURRENCE">give</EVENT> much advantage about cache coherence. 
 
 
 
Solution 1B  : Store it in each and every System. (1-3 allocator per System) 
 
The most appropriate way for a big game is <EVENT eid="e7" class="OCCURRENCE">adding</EVENT> a field "memory pool" for SystemDefault . 
 
Disadvantage: 
 
Not all memory-allocation demand is in System_xxx. 
 
For example :- 
 Some AI or physic engines <EVENT eid="e8" class="OCCURRENCE">use</EVENT> its own architecture that is not component-entity.  Some custom datastructure may contain another small datastructure.  For these cases, how should allocator be <EVENT eid="e9" class="OCCURRENCE">passed</EVENT>?  
Solution 1C  : Store it in each and every "Allocator holder" 
 
Make every class that <EVENT eid="e10" class="I_STATE">want</EVENT> to <EVENT eid="e11" class="OCCURRENCE">allocate</EVENT> some memory <EVENT eid="e12" class="OCCURRENCE">derived</EVENT> from a certain class AllocatorHolder. 
 
Disadvantage:  crazy? 
 
 
 
Question 2: How to <EVENT eid="e13" class="OCCURRENCE">enforce</EVENT> a code to <EVENT eid="e14" class="OCCURRENCE">use</EVENT> a certain allocator? 
 
Solution 2A : Use allocator of the system that <EVENT eid="e15" class="OCCURRENCE">contains</EVENT> the code. 
 
Disadvantage: There is a call like :- 
 
 
 
//System_A or System_B 
 
fA () or fB () { 
 
 loop {  
 
 array = System_C :: doSomething () ; 
 
 } 
 
} 
 
 
 
I don't <EVENT eid="e16" class="I_STATE">think</EVENT> it is good - System_C::doSomething should <EVENT eid="e17" class="OCCURRENCE">use</EVENT> allocator of A, and B for each situation. (right?) 
 
That is C should aware what class is <EVENT eid="e18" class="OCCURRENCE">using</EVENT> it - not just blindly <EVENT eid="e19" class="OCCURRENCE">use</EVENT> its own C allocator. 
 
 
 
Solution 2B : Passing allocator when calling every function. 
 
Now the <EVENT eid="e20" class="OCCURRENCE">calling</EVENT> will be :- 
 
 
 
//System_A or System_B 
 
fA () or fB () { 
 
 loop {  
 
 array = System_C :: doSomething (this) ; //or this->stack_allocator or this->oneFrame_allocator, etc. 
 
 } 
 
 } 
 
 
 
Disadvantage : <TIMEX3 tid="t1" type="DATE" value="PRESENT_REF">Now</TIMEX3>, every function practically should have allocator as a parameter - ugly. 
 
 
 
Question 3: How to <EVENT eid="e21" class="OCCURRENCE">initialize</EVENT> datastructure? 
 
In my old code it is easy like this:- 
 //inside SystemA
 fA(){
 MyArray ts;
 }  
Should I have to <EVENT eid="e22" class="OCCURRENCE">make</EVENT> it more harder like (applicable for 1A 1B or 1C):- 
 //inside SystemA
 fA(){
 MyArray ts;
         ts.setAllocator(this->stackAllocator);  
 }  
or (1A only) 
 //inside SystemA   
 fA(){
 MyArray ts;
 }  
------------------------------------------------------ 
 
 
 
There are a lot of memory pool resources in the internet, but none <EVENT eid="e23" class="I_ACTION">mention</EVENT> how to <EVENT eid="e24" class="OCCURRENCE">use</EVENT> it in practice. 
 
Here is what I <EVENT eid="e25" class="I_ACTION">read</EVENT>:- 
 Are we out of memory?       (a popular article)  C++: Custom memory allocation  (very long, <EVENT eid="e26" class="OCCURRENCE">provide</EVENT> usable code)
</TEXT>


<MAKEINSTANCE eiid="ie19" eventID="e19" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie18" eventID="e18" pos="VERB" tense="PRESENT" aspect="PROGRESSIVE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie11" eventID="e11" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie10" eventID="e10" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie13" eventID="e13" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="NEG" modality="N/A" />
<MAKEINSTANCE eiid="ie12" eventID="e12" pos="VERB" tense="PASTPART" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie15" eventID="e15" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie14" eventID="e14" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie17" eventID="e17" pos="VERB" tense="FUTURE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie16" eventID="e16" pos="VERB" tense="PRESENT" aspect="NONE" polarity="NEG" modality="N/A" />
<MAKEINSTANCE eiid="ie9" eventID="e9" pos="VERB" tense="NONE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie8" eventID="e8" pos="VERB" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie5" eventID="e5" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie4" eventID="e4" pos="NOUN" tense="NONE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie7" eventID="e7" pos="VERB" tense="PRESENT" aspect="PROGRESSIVE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie6" eventID="e6" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="NEG" modality="WOULD" />
<MAKEINSTANCE eiid="ie1" eventID="e1" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie3" eventID="e3" pos="VERB" tense="PAST" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie2" eventID="e2" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie24" eventID="e24" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie25" eventID="e25" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="NEG" modality="N/A" />
<MAKEINSTANCE eiid="ie26" eventID="e26" pos="UNKNOWN" tense="PRESENT" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie20" eventID="e20" pos="VERB" tense="PRESPART" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie21" eventID="e21" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="POS" modality="N/A" />
<MAKEINSTANCE eiid="ie22" eventID="e22" pos="VERB" tense="INFINITIVE" aspect="NONE" polarity="NEG" modality="N/A" />
<MAKEINSTANCE eiid="ie23" eventID="e23" pos="VERB" tense="NONE" aspect="NONE" polarity="POS" modality="N/A" />

</TimeML>
